name: Advanced CI Workflow for Datadog Visibility

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run comprehensive tests?'
        type: boolean
        required: false
        default: true
      fail_build_intentionally:
        description: 'Intentionally fail the build job?'
        type: boolean
        required: false
        default: false

jobs:
  # --- Build Job ---
  # This job simulates a build process. It can be intentionally failed.
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ steps.check_build_status.outcome }} # Output the outcome of the build step
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Simulate Building Code
        id: build_step # Add an ID to reference this step
        run: |
          echo "Starting build process..."
          # Simulate a build that takes some time
          sleep 5
          if ${{ github.event.inputs.fail_build_intentionally == 'true' }}; then
            echo "Intentionally failing build..."
            exit 1 # Exit with non-zero code to simulate failure
          else
            echo "Build successful!"
          fi
        # This step will only run if the previous build_step failed
      - name: Handle Build Failure
        if: ${{ failure() }}
        run: echo "Build failed! Skipping subsequent steps in this job."

      - name: Check Build Status
        id: check_build_status
        # This step always runs and sets an output based on the build_step's outcome
        run: | # Changed to multi-line syntax for robustness
          echo "Build step outcome: ${{ steps.build_step.outcome }}"

  # --- Linting Job ---
  # This job runs in parallel with the build and tests, simulating code quality checks.
  lint:
    name: Run Linting Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Linting Dependencies
        run: |
          echo "Installing linting tools..."
          # Example: pip install flake8
          sleep 2

      - name: Run Code Linting
        run: |
          echo "Running linting checks..."
          # Simulate linting errors sometimes
          if (( RANDOM % 10 < 3 )); then # 30% chance of linting failure
            echo "Linting failed: Found some issues!"
            exit 1
          else
            echo "Linting passed: Code looks clean!"
          fi

  # --- Test Job (Matrix Strategy) ---
  # This job runs tests across different Python versions, demonstrating a matrix strategy.
  # It depends on the 'build' job completing successfully.
  test:
    name: Run Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job
    if: ${{ needs.build.outputs.build_status == 'success' && github.event.inputs.run_tests == 'true' }} # Only run if build succeeded and tests are enabled
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10'] # Test across these Python versions
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Test Dependencies
        run: |
          echo "Installing test dependencies for Python ${{ matrix.python-version }}..."
          # Example: pip install pytest
          sleep 3

      - name: Run Unit Tests
        run: |
          echo "Running unit tests for Python ${{ matrix.python-version }}..."
          # Simulate some tests failing
          if [[ "${{ matrix.python-version }}" == "3.9" && $(( RANDOM % 10 )) < 5 ]]; then # 50% chance of failure on Python 3.9
            echo "Tests failed for Python 3.9!"
            exit 1
          else
            echo "Unit tests passed for Python ${{ matrix.python-version }}!"
          fi

      - name: Run Integration Tests
        if: ${{ success() }} # Only run if unit tests passed
        run: |
          echo "Running integration tests for Python ${{ matrix.python-version }}..."
          sleep 5
          echo "Integration tests passed!"

  # --- Deploy Job ---
  # This job simulates a deployment and only runs if all tests (from the matrix) pass.
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: test # This job depends on all instances of the 'test' job
    if: ${{ always() && github.event.inputs.run_tests == 'true' && !contains(join(needs.test.*.result), 'failure') }} # Only run if all tests passed and tests were run
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Deployment Target
        run: |
          echo "Authenticating to deployment environment..."
          sleep 2

      - name: Deploy to Production
        run: |
          echo "Deploying application..."
          sleep 10
          echo "Deployment complete!"

      - name: Post-Deployment Verification
        run: |
          echo "Verifying deployment..."
          sleep 3
          echo "Deployment verified successfully!"

  # --- Notification Job ---
  # This job runs regardless of previous job outcomes to send a notification.
  notify:
    name: Send Workflow Notification
    runs-on: ubuntu-latest
    # This job will run after all other jobs are complete, regardless of their success/failure.
    # It uses 'always()' to ensure it runs even if previous jobs failed.
    needs: [build, lint, test, deploy]
    if: ${{ always() }}
    steps:
      - name: Get Workflow Status
        id: get_status
        run: |
          # Determine overall workflow status
          if ${{ contains(join(needs.*.result), 'failure') }}; then
            echo "Overall workflow status: FAILURE"
            echo "status=failure" >> "$GITHUB_OUTPUT"
          else
            echo "Overall workflow status: SUCCESS"
            echo "status=success" >> "$GITHUB_OUTPUT"
          fi

      - name: Send Success Notification
        if: ${{ steps.get_status.outputs.status == 'success' }}
        run: echo "Workflow completed successfully! Sending success notification."

      - name: Send Failure Notification
        if: ${{ steps.get_status.outputs.status == 'failure' }}
        run: echo "Workflow failed! Sending failure notification with details."
